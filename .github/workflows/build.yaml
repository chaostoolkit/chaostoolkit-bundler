name: Build & Release

on:
  push:
    branches: [switch-to-gh-action]
  pull_request:
    branches: [switch-to-gh-action]

jobs:
  build-macos:
    runs-on: macOS-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install dependencies
        run: pip install -U --prefer-binary pip -r requirements.txt -r requirements-chaostoolkit.txt
      - name: Build for MacOSX
        run: |
          export CHAOSTOOLKIT_PATH=`which chaos`
          pyinstaller chaos.spec
          export CAL_VERSION=`cat VERSION`
          mv dist/chaos dist/chaostoolkit-bundle_darwin-amd64-${CAL_VERSION}
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install dependencies
        run: pip install -U --prefer-binary pip -r requirements.txt -r requirements-chaostoolkit.txt
      - name: Build for Linux
        run: |
          export CHAOSTOOLKIT_PATH=`which chaos`
          pyinstaller chaos.spec
          export CAL_VERSION=`cat VERSION`
          mv dist/chaos dist/chaostoolkit-bundle_linux-amd64-${CAL_VERSION}
  release:
    needs: [build-linux, build-macos]
    #if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Prepare Release
        run: |
          pip install -U --quiet --prefer-binary pip

          echo "Creating a new tag if needed"

          # keep track of any change in dependencies we must not carry around in the
          # next tag
          cp requirements-chaostoolkit.txt master-requirements-chaostoolkit.txt

          # moving to the latest tag (if one found)
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [[ $? == 0 ]]; then
              git checkout $latest_tag
          fi

          python3 update-requirements.py

          #Â have we updated the requirements?
          if [[ $? == 1 ]]; then
              rm master-requirements-chaostoolkit.txt

              # for debugging purpose
              git diff requirements-chaostoolkit.txt

              # today's version (suffixed if more than one per-day)
              # potential race condition here when multiple concurrent builds
              # let's assume it won't happen very often and we can fix it manually
              # Simplicity...
              export CAL_VERSION=`python3 get-next-version.py`

              # echo "Pushing the new version and set of dependencies"
              echo ${CAL_VERSION} > VERSION

              echo "Creating temporary branch"
              git checkout -b "ci-${CAL_VERSION}"
              git add VERSION requirements-chaostoolkit.txt
              git commit -s -m "Prepare ${CAL_VERSION}"

              echo "Tagging release"
              changes=`cat requirements-chaostoolkit.txt`
              git tag -a ${CAL_VERSION} -m "$(printf "Release ${CAL_VERSION}\n\nContains:\n${changes}")"
              git push --follow-tags -q origin "ci-${CAL_VERSION}" > /dev/null 2>&1

              echo "Tag ${CAL_VERSION} pushed"

              cp requirements-chaostoolkit.txt master-requirements-chaostoolkit.txt
              git checkout master
              cp master-requirements-chaostoolkit.txt requirements-chaostoolkit.txt
              git commit -s -m "Bump after release ${CAL_VERSION} [skip ci]" requirements-chaostoolkit.txt
              git push -q origin master > /dev/null 2>&1
          else
              echo "None of the dependencies have changed since the last release."
          fi